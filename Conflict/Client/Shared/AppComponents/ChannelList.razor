@inject HttpClient Http
@inject ChannelStateProvider ChannelState
@inject AddChannelModalStateProvider AddChannelModalState
@inject HubConnectionProvider ConnectionProvider
@inject AuthenticationStateProvider AuthStateProvider

<div class="channel-list-container">
	<h2>Conflict</h2>
	<div class="channel-list">
		@if (Channels is null)
		{
			<p>Loading channels...</p>
		}
		else
		{
			foreach (Channel channel in Channels)
			{
				string isActive = string.Empty;
				@if (ChannelState.CurrentChannel?.Id == channel.Id) isActive = "active";
				<div class="channel @isActive" @onmouseup="() => HandleChannelClick(channel)">
					<img class="channel-icon" src="/hashtag.svg">
					<p>@channel.Name</p>
					@if(channel.OwnerId == UserId)
					{
						<button class="delete-channel" onmouseup="event.stopPropagation()" @onclick="() => DeleteChannel(channel.Id)"><img draggable="false" src="/trash-icon.svg" /></button>
					}
				</div>
			}
		}
	</div>
	<button class="add-channel" @onclick="() => AddChannelModalState.SetState(AddChannelModalStateProvider.States.Shown)"><img src="/plus-icon.svg" /></button>
</div>